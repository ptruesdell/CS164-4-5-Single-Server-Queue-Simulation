import math
import random
import support
import SingleServer
 
# Random variable library for generating random variables
import numpy

# Global Variables:
float t
float ta, td1, td2, td3, td4
float tc

list line1, line2, line3, line4

# State Variables
int n1, n2, n3, n4

# Total number of customer arrivals throughout the day
int totalArrivals

# Customer struct (will populate line lists)
typedef struct {
	PyObject_HEAD
	int numItems;
}

# Generates arrival time, along with number of items in cart
def generateArrivalTime(lam):
	# Non-homogenous Poisson distribution
	ta = numpy.random.poisson(lam, 10000)
	totalArrivals += 1

#Parker
def generateDepartureTime():
	# If customer is at the front of the line -> generate departure time using weibull dist.

def updateTime(eventTime):
	# Adds event time to current time
	t += eventTime

def getTime():
	return t

#Parker
def getItemsInCart(line):
	# Return number of items in first current customer's cart (first customer in line)
	return line[len(line) - 1].numItems

#Jack
# Generated by exponential random variable (?)
def generateItemsInCart():

#Eric
def getEstimatedLineSize(line):
	# Returns line (which is a list)


#Sai
# Returns shortest estimated line
# Return value is the line that the customer chooses
def chooseLine():
	if min(getEstimatedLineSize(line1), getEstimatedLineSize(line2), getEstimatedLineSize(line3), getEstimatedLineSize(line4)) == line1:
		return line1
	elif min(getEstimatedLineSize(line1), getEstimatedLineSize(line2), getEstimatedLineSize(line3), getEstimatedLineSize(line4)) == line2:
		return line2
	elif min(getEstimatedLineSize(line1), getEstimatedLineSize(line2), getEstimatedLineSize(line3), getEstimatedLineSize(line4)) == line3:
		return line3
	else: 
		return line4

# Returns the soonest deparature time among all the lines
def getNextDepartureTime():
	return min(td1, td2, td3, td4)

# Creates new customer and sets number of items in cart
def createCustomer(numItems):


# Adds customer with specified properties to a line list
def addCustomerToLine(customer, line):
	line.push(customer)
	if (line == line1):
		n1 += 1
	elif (line == line2):
		n2 += 1
	elif (line == line3):
		n3 += 1
	else:
		n4 += 1


# Main loop
def runSimulation():
	while (True):
		# Case 1:
		if ((ta <= getNextDepartureTime()) and (ta < tc)):

			# Update current time by time of arrival
			updateTime(ta)

			# Increment total arrivals by 1
			totalArrivals += 1

			# Create customer and generate number of items in cart
			customer = createCustomer(generateItemsInCart())

			# Add customer to "shortest" line
			addCustomerToLine(customer, chooseLine())

			# Generate and set new arrival time
			ta = generateArrivalTime()
			
		elif (getNextDepartureTime() < ta) and 






		
