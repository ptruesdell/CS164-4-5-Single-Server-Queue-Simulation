import math
import random
 
# Random variable library for generating random variables
#import numpy

a_jillion = 100000.0
a_kajillion = 10.0 * a_jillion

listy = list()
print listy
x = 6
listy.append(x)
print len(listy)


# Current time variable
t = 0.0

# Time of line switch
ts = 0.0

ta = 0.0

# Departure times for 4-server
td1 = a_jillion
td2 = a_jillion
td3 = a_jillion
td4 = a_jillion

# Closing time variable
tc = 100.0

# Initialize line lists
# Line lists will contain customers represented by an integer number of items in cart
line1 = list()
line2 = list()
line3 = list()
line4 = list()

longLineSize = 1

# Total number of customer arrivals throughout the day
totalArrivals = 0

# Initialize r.v. generation parameters

# Arrival time parameter
lam = 0.5

# Cart size parameter
cartSizeLam = 0.5

switchLam = 0.8

# Generates arrival time, along with number of items in cart
def generateArrivalTime():
	# Non-homogenous Poisson distribution
	# random variable u
	u = random.random()
	# Set New Arrival time to exponential equation
	Y = (-lam) * math.log(1 - u)
	return (Y + t)


# TODO: change to weibull
def generateDepartureTime():
	# If customer is at the front of the line -> generate departure time using weibull dist.
	u = random.random()
	Y = (-lam) * math.log(1 - u)
	return (Y + t)

# Exponential
def generateSwitchTime():
	u = random.random()
	Y = (-switchLam) * math.log(1 - u)
	return (Y + t)

def updateTime(eventTime):
	# Adds event time to current time
	t += eventTime

#Parker
def getItemsInCart(line):
	# Return number of items in first current customer's cart (first customer in line)
	return line[len(line) - 1].numItems

#Jack
# Generated by exponential random variable (?)
# Should return an integer
def generateItemsInCart():

	# Generate uniform random variable
	u = random.random()

	# Returns number of items in cart 
	return math.ceil(40*(-cartSizeLam)*math.log(1 - u))

#Eric
def getEstimatedWaitTime(line):
	# Returns line (which is a list)
	sum = 0
	i = 0
	for i in range(len(line) - 1):
		sum += line[i]
	return sum + (5 * len(line))

# Returns shortest estimated line
# Return value is the line that the customer chooses
def chooseLine():

	lists = list()
	Minimums = 0

	if (getShortestLine() == getEstimatedWaitTime(line1)):
		Minimums += 1
		lists.append(line1) #List of lists is called 'lists', keeps track of lines tied for shortest
	if (getShortestLine() == getEstimatedWaitTime(line2)):
		Minimums += 1
		lists.append(line2)
	if (getShortestLine() == getEstimatedWaitTime(line3)):
		Minimums += 1
		lists.append(line3)
	if (getShortestLine() == getEstimatedWaitTime(line4)):
		Minimums += 1
		lists.append(line4)
	if (Minimums == 2):
		u = random.random()
		if (u <= 0.5):
			return lists[0]
		else: 
			return lists[1]
	if (Minimums == 3):
		u = random.random()
		if (u <= .3333):
			return lists[0]
		elif (u > .3333 and u < .66667):
			return lists[1]
		else:
			return lists[2]
	if (Minimums == 4):
		u = random.random()
		if (u <= .25):
			return lists[0]
		elif (u > .25 and u <= .5):
			return lists[1]
		elif (u > .5 and u <= .75):
			return lists[2]
		else:
			return lists[3]

		if min(getEstimatedWaitTime(line1), getEstimatedWaitTime(line2), getEstimatedWaitTime(line3), getEstimatedWaitTime(line4)) == getEstimatedWaitTime(line1):
			print "line 1 chosen"
			return line1
		elif min(getEstimatedWaitTime(line1), getEstimatedWaitTime(line2), getEstimatedWaitTime(line3), getEstimatedWaitTime(line4)) == getEstimatedWaitTime(line2):
			print "line 2 chosen"
			return line2
		elif min(getEstimatedWaitTime(line1), getEstimatedWaitTime(line2), getEstimatedWaitTime(line3), getEstimatedWaitTime(line4)) == getEstimatedWaitTime(line3):
			"line 3 chosen"
			return line3
		else:
			print "line 4 chosen"
			return line4

# Returns the soonest deparature time among all the lines
def getNextDepartureTime():
	return min(td1, td2, td3, td4)

# Returns time of next event
def getNextEvent():
	return min(ta, td1, td2, td3, td4)

def getLongestLine():
	return max(getEstimatedWaitTime(line1), getEstimatedWaitTime(line2), getEstimatedWaitTime(line3), getEstimatedWaitTime(line4))

def getShortestLine():
    return min(getEstimatedWaitTime(line1), getEstimatedWaitTime(line2), getEstimatedWaitTime(line3), getEstimatedWaitTime(line4))

def getShortestLineSwitch(line):
	return min(getEstimatedWaitTime(line), getEstimatedWaitTime(line1), getEstimatedWaitTime(line2), getEstimatedWaitTime(line3), getEstimatedWaitTime(line4))


# Main loop
def runSimulation():

	# Initialize first arrival time
	ta = generateArrivalTime()

	# Global Variables:

	a_jillion = 100000
	a_kajillion = 10 * a_jillion

	# Current time variable
	t = 0.0

	# Time of line switch
	ts = a_jillion

	ta = 0.0

	# Departure times for 4-server
	td1 = a_jillion
	td2 = a_jillion
	td3 = a_jillion
	td4 = a_jillion

	# Closing time variable
	tc = 100.0

	# Initialize line lists
	# Line lists will contain customers represented by an integer number of items in cart
	line1 = list()
	line2 = list()
	line3 = list()
	line4 = list()

	# Total number of customer arrivals throughout the day
	totalArrivals = 0

	# Initialize r.v. generation parameters

	# Arrival time parameter
	longLineSize = 1

	# Cart size parameter
	cartSizeLam = 0.5

	switchLam = 0.8


	while (True):
		# Case 1 (Arrival ocurrs before departure from any line and before closing):
		if (getNextEvent() == ta and ta < tc):

			# Update current time by time of arrival
			t = ta
			print "first arrival time"
			print ta

			# Increment total arrivals by 1
			totalArrivals += 1

			# Add customer to "shortest" line
			items = generateItemsInCart()
			activeList = list(chooseLine())
			chooseLine().append(items)

			# Generate and set new arrival time
			ta = generateArrivalTime()
			print ta

			print len(chooseLine())

			if (len(activeLine())==1):
				if (cmp(chooseLine(), line1) == True):
					td1 = generateDepartureTime()
					print "line 1: " + td1
				elif (cmp(chooseLine(), line2) == True):
					td2 = generateDepartureTime()
					print "line 2: " + td2
				elif (cmp(chooseLine(), line3) == True):
					td3 = generateDepartureTime()
					print "line 3: " + td3
				else:
					td4 = generateDepartureTime()
					print "line 4 : " + td4

			print line1
			print line2
			print line3
			print line4

			print t

		# Cases 2-5 (Departure from one of the lines ocurrs before new arrival and before closing):
		elif (getNextEvent() == td1 and td1 < tc):

			# Update current time by earliest deparature time
			t = td1

			# Remove departed customer from line with earliest departure time
			line1.pop()

			if (len(line1) > 0):
				td1 = generateDepartureTime()
			else: 
				td1 = a_jillion

		elif (getNextEvent() == td2 and td2 < tc):

			# Update current time by earliest deparature time
			t = td2

			# Remove departed customer from line with earliest departure time
			line2.pop()

			if (len(line2) > 0):
				td2 = generateDepartureTime()
			else: 
				td2 = a_kajillion

		elif (getNextEvent() == td3 and td3 < tc):

			# Update current time by earliest deparature time
			t = td3

			# Remove departed customer from line with earliest departure time
			line3.pop()

			if (len(line3) > 0):
				td3 = generateDepartureTime()
			else: 
				td3 = a_jillion

		elif (getNextEvent() == td4 and td4 < tc):

			# Update current time by earliest deparature time
			t = td4

			# Remove departed customer from line with earliest departure time
			line4.pop()

			if (len(line4) > 0):
				td4 = generateDepartureTime()
			else: 
				td4 = a_jillion


		"""elif (getNextEvent() == ts and ts < tc):
			longLineSize = len(getLongestLine())

			longestLine = list(getLongestLine())

	        lastInLineIndex = longestLine[longLineSize - 1]   

	        temp = list(getLongestLine())

	        del temp[longLineSize-1]       
	        
	        if(cmp(temp, getShortestLineSwitch(temp)) == False): 
	        	getSmallestLine().push(lastInLineIndex)
	       	
	        t = ts
	        ts = generateSwitchTime()"""

		# Case 6 (Next departure happens after closing and at least one customer is still in line)
		if (lam == 10.0):

			# Keep out new arrivals
			ta = a_kajillion

			tc = 10000

		# Case 7 (Closing time is earlier than next departure and all lines are empty):	
		elif ((tc < getNextEvent()) and () == 0):

			print t
			print totalArrivals
			# print any other necessary data

			# End the loop
			break


#runSimulation()








		
