4 server queue vs. 5 server queue (w/ express line)

______________________________________________________________________

Time variable: t

Items in cart: items

Time of Closing: t_c

Time of Arrival variable: t_a

Time of Departure variable: t_d

Time of departure queues
	4-Server Queue:
Line1Time, Line2Time, Line3Time, Line4Time
5-Server Queue:
		Line1Time, Line2Time, Line3Time, Line4Time, Line5Time

Counter variable: Na

Event List: arrival, depart line 1, depart line 2, depart line 3, depart line 4, line switch

System state variables:
	Line1Time = {customer1, customer2, etc.}, 
	Line2Time = {‘’}
	…
	Line4/5Time = {‘’}
______________________________________________________________________	

Item scanning time equals the sum of the number of items in the cart times the expected scanning time. 
total customer departure time is the sum of the item scanning time and the random variable modeling the payment and bagging time

line switches depend on perceived wait times of each line (sum of Line1Time, etc) Bernoulli RV

if lines are all about the same length, then choice of line will be determined by a uniform random variable

Arrival times depend on a random variable generated by a non-homogenous poisson process

Departure times modeled by Weibull distribution
Changes: 
Td is not a state variable; generating Td when they are at the front of the line
Use Weibull with different parameters based on the number of items
Use Bernoulli RV to generate line switching 

______________________________________________________________________	

Algorithm 

Starting Event: 
Someone arrives and generate the number of items in their cart 
All lines are empty; put them in line 1 
(Generate Discrete RV Inverse Transform Method) 

*push pushes an item to the top of the stack
Generate t_d = weibull + scantime*items, Line1Time.push(t_d), and generate t_a, set t = 0

Case 1: If t_a  <= min (Line1Time.front(), Line2Time.front(), Line3Time.front(), Line4Time.front()) and t_a <= t_c

Set t =  t_a + t
Generate the number of items in their cart: (variable named ‘items’)
Generate the line they go to:
Default :  (min(sum(Line1Time), sum(Line2Time), sum(Line3Time), sum(Line4Time))
If min is shared by multiple lines (i.e. multiple empty lines) uniform distribution for choice
If items <= 10
	min(sum(Line1Time), ... , sum(Line5Time))  	//include express line time
Increment total arrivals Na by 1 (for data)
Generate new arrival time (t_a = poisson + t)
Generate this person’s departure time ( t_d = weibull + scantime*items + t)
	Push time into queue (LineXTime.push(t_d))


For Case 2 - 5, departures have to be <= t_c   //  not closing time yet

Case 2:  If Line1Time.front() < min (t_a, Line2Time.front(), Line3Time.front(), Line4Time.front()) 

Set t = t + Line1Time.front()
Pop Line1Time (pop.Line1Time [remove them from line])

Case 3:  If Line2Time.front() < min (t_a, Line1Time.front(), Line3Time.front(), Line4Time.front())

Set t = t + Line2Time.front()
Pop Line2Time (pop.Line2Time [remove them from line])

Case 4:  If Line3Time.front() < min (t_a, Line1Time.front(), Line2Time.front(), Line4Time.front())

Set t = t + Line3Time.front()
Pop Line3Time (pop.Line3Time [remove them from line])

Case 5:  If Line4Time.front() < min (t_a, Line1Time.front(), Line2Time.front(), Line3Time.front())

Set t = t + Line4Time.front()
Pop Line4Time (pop.Line4Time [remove them from line])

// Case only for when including express
Case 6: If Line5Time.front() < min (t_a, Line1Time.front(),....Line4Time.front())

Set t = t + Line5Time.front()
Pop Line5Time (pop.Line5Time [remove them from line])

Case 6.1:
 If t_c < min(t_a, Line1Time.front() … , Line4/5Time.front()) , number of each line >0  
//store is closed, still people in line

Set t_c = 2 * t_c		// extend closing time for people already in line (size is negligible)
				// I don’t think we should extend time
Set t_a = infinity 		// no more possible arrivals, continues until finished
				// I also don’t think we need to do this

Set t =  t + Line1Time.front()			// time = departure

Pop Line1Time			// number of customers decrement by 1

Case 7:

If t_c < min(t_a, Line1Time.front()....., Line4/5Time.front()), number of all lines = 0,
Print any necessary data
Break   // breaks loop
